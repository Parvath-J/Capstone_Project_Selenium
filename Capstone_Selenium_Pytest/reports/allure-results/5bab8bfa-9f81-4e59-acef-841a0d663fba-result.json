{"name": "DDT Login Test - User: invalid_user, Expected: Fail", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_001_login.Test_001_Login object at 0x00000205FFDAB460>, username = 'invalid_user', password = 'invalid_pass', expected_result = 'Fail'\n\n    @pytest.mark.regression\n    @pytest.mark.parametrize(\"username, password, expected_result\", get_login_data_from_excel())\n    def test_login_data_driven(self, username, password, expected_result):\n    \n        # Generate a dynamic test name for Allure\n        allure.dynamic.title(f\"DDT Login Test - User: {username}, Expected: {expected_result}\")\n        self.logger.info(f\"**** Starting test_login_data_driven for {username} ****\")\n    \n        self.driver.get(self.baseURL)\n        self.login_page = LoginPage(self.driver)\n        # Use the robust send_keys from BasePage for better reliability\n        self.login_page.do_robust_send_keys(self.login_page.USERNAME_INPUT, username)\n        self.login_page.do_robust_send_keys(self.login_page.PASSWORD_INPUT, password)\n        self.login_page.click_login()\n    \n        if expected_result == \"Pass\":\n            self.logger.info(\"Expecting PASS\")\n            self.inventory_page = InventoryPage(self.driver)\n            # Check if we are on the inventory page\n            if self.inventory_page.is_visible(self.inventory_page.PAGE_TITLE):\n                assert True\n                self.logger.info(f\"**** Test PASSED for {username} (Expected: Pass) ****\")\n            else:\n                self.logger.error(f\"**** Test FAILED for {username} (Expected: Pass, but not on inventory page) ****\")\n                assert False\n    \n        elif expected_result == \"Fail\":\n            self.logger.info(\"Expecting FAIL\")\n            # Check if the error message is visible\n            if self.login_page.is_visible(self.login_page.ERROR_MESSAGE_LABEL):\n                assert True\n                self.logger.info(f\"**** Test PASSED for {username} (Expected: Fail, error message shown) ****\")\n            else:\n                self.logger.error(f\"**** Test FAILED for {username} (Expected: Fail, but no error found) ****\")\n>               assert False\nE               assert False\n\ntestCases\\test_001_login.py:111: AssertionError"}, "attachments": [{"name": "screenshot_on_failure", "source": "db489095-1d5f-4097-ac50-f780879e5980-attachment.png", "type": "image/png"}, {"name": "log", "source": "ed7f70f1-a928-4ffd-8460-716bbacc97da-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'invalid_user'"}, {"name": "password", "value": "'invalid_pass'"}, {"name": "expected_result", "value": "'Fail'"}], "start": 1761067749783, "stop": 1761067760937, "uuid": "91a6574d-0d72-4c2f-abc6-97542c6e9dfd", "historyId": "670c7732180aa05d7b90cd1a7ccd5d62", "testCaseId": "06828587617d33b928cc49b4f95c8bb1", "fullName": "testCases.test_001_login.Test_001_Login#test_login_data_driven", "labels": [{"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_001_login"}, {"name": "subSuite", "value": "Test_001_Login"}, {"name": "host", "value": "ASCENDI-S70S5SL"}, {"name": "thread", "value": "16064-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_001_login"}], "titlePath": ["testCases", "test_001_login.py", "Test_001_Login"]}