{"name": "test_end_to_end_checkout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: MicrosoftEdge=141.0.3537.85)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7649a2a75+51877]\n\tGetHandleVerifier [0x0x7ff7649a2ad4+51972]\n\tGetHandleVerifier [0x0x7ff764b59425+1848405]\n\t(No symbol) [0x0x7ff7646f0e5f]\n\t(No symbol) [0x0x7ff7647874ec]\n\t(No symbol) [0x0x7ff76479ed0a]\n\t(No symbol) [0x0x7ff764781df3]\n\t(No symbol) [0x0x7ff764755b36]\n\t(No symbol) [0x0x7ff764754d80]\n\t(No symbol) [0x0x7ff764755973]\n\t(No symbol) [0x0x7ff76481e4a5]\n\t(No symbol) [0x0x7ff76481a75d]\n\tGetHandleVerifier [0x0x7ff7649cd2b3+226019]\n\tGetHandleVerifier [0x0x7ff7649bc481+156849]\n\tGetHandleVerifier [0x0x7ff7649c4979+190889]\n\tGetHandleVerifier [0x0x7ff7649a9bb4+80868]\n\tGetHandleVerifier [0x0x7ff7649a9d03+81203]\n\tGetHandleVerifier [0x0x7ff764998286+8886]\n\tBaseThreadInitThunk [0x0x7ff8a04ee8d7+23]\n\tRtlUserThreadStart [0x0x7ff8a1c6c53c+44]", "trace": "self = <testCases.test_003_checkout_flow.Test_003_Checkout object at 0x000002487F96C550>\n\n    @pytest.mark.regression\n    def test_end_to_end_checkout(self):\n        self.logger.info(\"**** Starting Test_003_Checkout End-to-End Test ****\")\n    \n        # 1. Login\n        self.driver.get(self.baseURL)\n        self.login_page = LoginPage(self.driver)\n>       self.login_page.set_username(self.username)\n\ntestCases\\test_003_checkout_flow.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\LoginPage.py:17: in set_username\n    self.do_send_keys(self.USERNAME_INPUT, username)\npageObjects\\BasePage.py:24: in do_send_keys\n    self.wait.until(EC.visibility_of_element_located(by_locator)).send_keys(text)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:217: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002487F96D6D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...7ff764998286+8886]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff8a04ee8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8a1c6c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: MicrosoftEdge=141.0.3537.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7649a2a75+51877]\nE       \tGetHandleVerifier [0x0x7ff7649a2ad4+51972]\nE       \tGetHandleVerifier [0x0x7ff764b59425+1848405]\nE       \t(No symbol) [0x0x7ff7646f0e5f]\nE       \t(No symbol) [0x0x7ff7647874ec]\nE       \t(No symbol) [0x0x7ff76479ed0a]\nE       \t(No symbol) [0x0x7ff764781df3]\nE       \t(No symbol) [0x0x7ff764755b36]\nE       \t(No symbol) [0x0x7ff764754d80]\nE       \t(No symbol) [0x0x7ff764755973]\nE       \t(No symbol) [0x0x7ff76481e4a5]\nE       \t(No symbol) [0x0x7ff76481a75d]\nE       \tGetHandleVerifier [0x0x7ff7649cd2b3+226019]\nE       \tGetHandleVerifier [0x0x7ff7649bc481+156849]\nE       \tGetHandleVerifier [0x0x7ff7649c4979+190889]\nE       \tGetHandleVerifier [0x0x7ff7649a9bb4+80868]\nE       \tGetHandleVerifier [0x0x7ff7649a9d03+81203]\nE       \tGetHandleVerifier [0x0x7ff764998286+8886]\nE       \tBaseThreadInitThunk [0x0x7ff8a04ee8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff8a1c6c53c+44]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "a55797fd-1867-4814-9164-8a8e8720627c-attachment.txt", "type": "text/plain"}], "start": 1761073757410, "stop": 1761073840317, "uuid": "ac8e305d-664f-4dc2-a09c-87281a37b562", "historyId": "46e885d65e2524c8e761966d320035c3", "testCaseId": "46e885d65e2524c8e761966d320035c3", "fullName": "testCases.test_003_checkout_flow.Test_003_Checkout#test_end_to_end_checkout", "labels": [{"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_003_checkout_flow"}, {"name": "subSuite", "value": "Test_003_Checkout"}, {"name": "host", "value": "ASCENDI-S70S5SL"}, {"name": "thread", "value": "15184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_003_checkout_flow"}], "titlePath": ["testCases", "test_003_checkout_flow.py", "Test_003_Checkout"]}