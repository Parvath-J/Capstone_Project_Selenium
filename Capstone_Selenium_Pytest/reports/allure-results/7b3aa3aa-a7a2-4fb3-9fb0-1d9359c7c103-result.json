{"name": "test_end_to_end_checkout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x11afe83+66515]\n\tGetHandleVerifier [0x0x11afec4+66580]\n\t(No symbol) [0x0xf9dc48]\n\t(No symbol) [0x0xfe8704]\n\t(No symbol) [0x0xfe8aab]\n\t(No symbol) [0x0x102f482]\n\t(No symbol) [0x0x100b214]\n\t(No symbol) [0x0x102cba7]\n\t(No symbol) [0x0x100afc6]\n\t(No symbol) [0x0xfdc2ca]\n\t(No symbol) [0x0xfdd154]\n\tGetHandleVerifier [0x0x14073b3+2521347]\n\tGetHandleVerifier [0x0x1402333+2500739]\n\tGetHandleVerifier [0x0x11d7cd4+229924]\n\tGetHandleVerifier [0x0x11c8238+165768]\n\tGetHandleVerifier [0x0x11ceced+193085]\n\tGetHandleVerifier [0x0x11b8198+100072]\n\tGetHandleVerifier [0x0x11b8330+100480]\n\tGetHandleVerifier [0x0x11a25ea+11066]\n\tBaseThreadInitThunk [0x0x77095d49+25]\n\tRtlInitializeExceptionChain [0x0x773cd6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x773cd661+561]", "trace": "self = <testCases.test_003_checkout_flow.Test_003_Checkout object at 0x000001FA805DA5D0>\n\n    @pytest.mark.regression\n    def test_end_to_end_checkout(self):\n        self.logger.info(\"**** Starting Test_003_Checkout End-to-End Test ****\")\n    \n        # 1. Login\n        self.driver.get(self.baseURL)\n        self.login_page = LoginPage(self.driver)\n        self.login_page.set_username(self.username)\n        self.login_page.set_password(self.password)\n        self.login_page.click_login()\n    \n        # 2. Add item to cart\n        self.inventory_page = InventoryPage(self.driver)\n        self.inventory_page.add_backpack_to_cart()\n        self.inventory_page.click_shopping_cart()\n    \n        # 3. Go to checkout\n        self.cart_page = CartPage(self.driver)\n>       self.cart_page.click_checkout()\n\ntestCases\\test_003_checkout_flow.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\CartPage.py:18: in click_checkout\n    self.do_click(self.CHECKOUT_BUTTON)\npageObjects\\BasePage.py:12: in do_click\n    WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(by_locator)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7592247d653a536f5f5ccd5f562e1066\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FA8072AC00>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x11afe83+66515]\nE       \tGetHandleVerifier [0x0x11afec4+66580]\nE       \t(No symbol) [0x0xf9dc48]\nE       \t(No symbol) [0x0xfe8704]\nE       \t(No symbol) [0x0xfe8aab]\nE       \t(No symbol) [0x0x102f482]\nE       \t(No symbol) [0x0x100b214]\nE       \t(No symbol) [0x0x102cba7]\nE       \t(No symbol) [0x0x100afc6]\nE       \t(No symbol) [0x0xfdc2ca]\nE       \t(No symbol) [0x0xfdd154]\nE       \tGetHandleVerifier [0x0x14073b3+2521347]\nE       \tGetHandleVerifier [0x0x1402333+2500739]\nE       \tGetHandleVerifier [0x0x11d7cd4+229924]\nE       \tGetHandleVerifier [0x0x11c8238+165768]\nE       \tGetHandleVerifier [0x0x11ceced+193085]\nE       \tGetHandleVerifier [0x0x11b8198+100072]\nE       \tGetHandleVerifier [0x0x11b8330+100480]\nE       \tGetHandleVerifier [0x0x11a25ea+11066]\nE       \tBaseThreadInitThunk [0x0x77095d49+25]\nE       \tRtlInitializeExceptionChain [0x0x773cd6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x773cd661+561]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "screenshot_on_failure", "source": "10bea5fb-24e1-48fa-87a5-416d87f9839f-attachment.png", "type": "image/png"}, {"name": "log", "source": "3d9f8f19-0ac6-4dee-af3c-7dac585c8224-attachment.txt", "type": "text/plain"}], "start": 1760612290930, "stop": 1760612310688, "uuid": "f7a8802f-a9ff-4f6c-ad03-f0a6b7868d30", "historyId": "46e885d65e2524c8e761966d320035c3", "testCaseId": "46e885d65e2524c8e761966d320035c3", "fullName": "testCases.test_003_checkout_flow.Test_003_Checkout#test_end_to_end_checkout", "labels": [{"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_003_checkout_flow"}, {"name": "subSuite", "value": "Test_003_Checkout"}, {"name": "host", "value": "ASCENDI-S70S5SL"}, {"name": "thread", "value": "1488-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_003_checkout_flow"}], "titlePath": ["testCases", "test_003_checkout_flow.py", "Test_003_Checkout"]}